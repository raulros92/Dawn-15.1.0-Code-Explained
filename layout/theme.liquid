<!doctype html>
{% comment %} 
'class=js' This class is often used to apply styles or scripts conditionally based on whether JavaScript is enabled.
'lang=' This is a Liquid placeholder that dynamically inserts the ISO code of the locale
 {% endcomment %}
<html class="js" lang="{{ request.locale.iso_code }}">
  <head>
    {% comment %} Specifies the character encoding for the HTML document {% endcomment %}
    <meta charset="utf-8">
    {% comment %} Ensures that Internet Explorer uses the latest rendering engine {% endcomment %}
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    {% comment %} Controls the layout on mobile browsers {% endcomment %}
    <meta name="viewport" content="width=device-width,initial-scale=1">
    {% comment %} Defines the color of the browser's address bar on mobile devices {% endcomment %}
    <meta name="theme-color" content="">
    {% comment %} Specifies the preferred version of a web page URL {% endcomment %}
    <link rel="canonical" href="{{ canonical_url }}">

    {% comment %} 
    The rel attribute tells the browser what the resource is for. 
    The type attribute specifies the resource type.
    {% endcomment %}
    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
    {%- endif -%}

    {% comment %} 
    system? Method: Checks if the font is a system font.
    preconnect and crossorigin: Improve performance and handle cross-origin requests.
    {% endcomment %}
    {%- unless settings.type_header_font.system? and settings.type_body_font.system? -%}
      <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
    {%- endunless -%}

    <title>
      {% comment %} 
      The <title> element sets the title of the web page.
      You can add tags and page numbers to the title tag.
      The title tag is important for search engine optimization (SEO) and accessibility.
      {% endcomment %}
      {{ page_title }}
      {%- if current_tags %} &ndash; tagged "{{ current_tags | join: ', ' }}"{% endif -%}
      {%- if current_page != 1 %} &ndash; Page {{ current_page }}{% endif -%}
      {%- unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless -%}
    </title>

    {% if page_description %}
      {% comment %} 
      escape filter ensuring that any special characters are properly encoded for HTML. 
      A well-written meta description can improve your pageâ€™s visibility and attractiveness in search results.
      {% endcomment %}
      <meta name="description" content="{{ page_description | escape }}">
    {% endif %}

    {% comment %} Including this snippet helps keep the <head> section modular and maintainable. {% endcomment %}
    {% render 'meta-tags' %}

    {% comment %} These lines include JavaScript files necessary for various functionalities on your site.
    The defer attribute in HTML can be written either as defer="defer" or simply as defer.
    {% endcomment %}
    <script src="{{ 'constants.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'pubsub.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'global.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'details-disclosure.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'details-modal.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'search-form.js' | asset_url }}" defer="defer"></script>

    {%- if settings.animations_reveal_on_scroll -%}
      <script src="{{ 'animations.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}

    {{ content_for_header }}

    {% comment %} Assigning variables for body_font bold, italic and bold_italic {% endcomment %}
    {%- liquid
      assign body_font_bold = settings.type_body_font | font_modify: 'weight', 'bold'
      assign body_font_italic = settings.type_body_font | font_modify: 'style', 'italic'
      assign body_font_bold_italic = body_font_bold | font_modify: 'style', 'italic'
    %}

    {% comment %} 
    The font-display: swap property is a CSS rule that controls how fonts are rendered. 
    When specified, the browser will use a fallback font until the custom font is fully loaded, then swap to the custom font. 
    {% endcomment %}
    {% style %}
      {{ settings.type_body_font | font_face: font_display: 'swap' }}
      {{ body_font_bold | font_face: font_display: 'swap' }}
      {{ body_font_italic | font_face: font_display: 'swap' }}
      {{ body_font_bold_italic | font_face: font_display: 'swap' }}
      {{ settings.type_header_font | font_face: font_display: 'swap' }}

      /*   Iterate over each color scheme defined in the settings.color_schemes array. */
      {% for scheme in settings.color_schemes -%}
        /* Build a list of CSS class selectors for each color scheme. 
        Each color scheme class is appended to the scheme_classes variable. */
        {% assign scheme_classes = scheme_classes | append: ', .color-' | append: scheme.id %}
        /* For the first iteration (first color scheme), include :root to define global CSS variables. */
        {% if forloop.index == 1 -%}
          :root,
        {%- endif %}
        /* Define CSS custom properties (variables) for the current color scheme. */
        .color-{{ scheme.id }} {
          /* Set the background color for the color scheme using RGB values extracted from scheme.settings.background. */
          --color-background: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
        {% if scheme.settings.background_gradient != empty %}
          --gradient-background: {{ scheme.settings.background_gradient }};
        {% else %}
          --gradient-background: {{ scheme.settings.background }};
        {% endif %}

        /* This block calculates the appropriate contrast color for the background, based on its brightness.
        It assigns a lighter or darker version of the background color to ensure sufficient contrast.
        If the background is very dark, it lightens the color significantly.
        If moderately dark, it lightens it slightly, and if light, it darkens it to create contrast. */
        {% liquid
          assign background_color = scheme.settings.background
          assign background_color_brightness = background_color | color_brightness
          if background_color_brightness <= 26
            assign background_color_contrast = background_color | color_lighten: 50
          elsif background_color_brightness <= 65
            assign background_color_contrast = background_color | color_lighten: 5
          else
            assign background_color_contrast = background_color | color_darken: 25
          endif
        %}

        /* This block defines CSS custom properties for various elements using the color values
        from the current color scheme. It sets colors for foreground (text), background contrast,
        shadows, buttons, and more, using the RGB values provided in the color scheme settings.
        These properties will be applied to style different UI components. */
        --color-foreground: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
        --color-background-contrast: {{ background_color_contrast.red }},{{ background_color_contrast.green }},{{ background_color_contrast.blue }};
        --color-shadow: {{ scheme.settings.shadow.red }},{{ scheme.settings.shadow.green }},{{ scheme.settings.shadow.blue }};
        --color-button: {{ scheme.settings.button.red }},{{ scheme.settings.button.green }},{{ scheme.settings.button.blue }};
        --color-button-text: {{ scheme.settings.button_label.red }},{{ scheme.settings.button_label.green }},{{ scheme.settings.button_label.blue }};
        --color-secondary-button: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
        --color-secondary-button-text: {{ scheme.settings.secondary_button_label.red }},{{ scheme.settings.secondary_button_label.green }},{{ scheme.settings.secondary_button_label.blue }};
        --color-link: {{ scheme.settings.secondary_button_label.red }},{{ scheme.settings.secondary_button_label.green }},{{ scheme.settings.secondary_button_label.blue }};
        --color-badge-foreground: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
        --color-badge-background: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
        --color-badge-border: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
        --payment-terms-background-color: rgb({{ scheme.settings.background.rgb }});
      }
      {% endfor %}

      /* This block applies the generated color scheme classes to the body element. 
      It sets the text color and background color of the body using the calculated CSS custom properties.
      The text color is slightly transparent (75% opacity) for visual effect. */
      {{ scheme_classes | prepend: 'body' }} {
        color: rgba(var(--color-foreground), 0.75);
        background-color: rgb(var(--color-background));
      }

      /* This block of code defines CSS custom properties (variables) used throughout the theme to manage 
      various styles dynamically. The variables are set based on theme settings configured in the 
      Shopify admin. These settings control typography, layout dimensions, padding, margins, border 
      styles, shadows, and more, allowing for flexible design adjustments without directly modifying 
      CSS files. The values are pulled from `settings_schema.json` and processed as necessary (e.g., 
      converting units, adjusting brightness, etc.) to ensure correct rendering in different contexts. */
      :root {
        --font-body-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
        --font-body-style: {{ settings.type_body_font.style }};
        --font-body-weight: {{ settings.type_body_font.weight }};
        --font-body-weight-bold: {{ settings.type_body_font.weight | plus: 300 | at_most: 1000 }};

        --font-heading-family: {{ settings.type_header_font.family }}, {{ settings.type_header_font.fallback_families }};
        --font-heading-style: {{ settings.type_header_font.style }};
        --font-heading-weight: {{ settings.type_header_font.weight }};

        --font-body-scale: {{ settings.body_scale | divided_by: 100.0 }};
        --font-heading-scale: {{ settings.heading_scale | times: 1.0 | divided_by: settings.body_scale }};

        --media-padding: {{ settings.media_padding }}px;
        --media-border-opacity: {{ settings.media_border_opacity | divided_by: 100.0 }};
        --media-border-width: {{ settings.media_border_thickness }}px;
        --media-radius: {{ settings.media_radius }}px;
        --media-shadow-opacity: {{ settings.media_shadow_opacity | divided_by: 100.0 }};
        --media-shadow-horizontal-offset: {{ settings.media_shadow_horizontal_offset }}px;
        --media-shadow-vertical-offset: {{ settings.media_shadow_vertical_offset }}px;
        --media-shadow-blur-radius: {{ settings.media_shadow_blur }}px;
        --media-shadow-visible: {% if settings.media_shadow_opacity > 0 %}1{% else %}0{% endif %};

        --page-width: {{ settings.page_width | divided_by: 10 }}rem;
        --page-width-margin: {% if settings.page_width == '1600' %}2{% else %}0{% endif %}rem;

        --product-card-image-padding: {{ settings.card_image_padding | divided_by: 10.0 }}rem;
        --product-card-corner-radius: {{ settings.card_corner_radius | divided_by: 10.0 }}rem;
        --product-card-text-alignment: {{ settings.card_text_alignment }};
        --product-card-border-width: {{ settings.card_border_thickness | divided_by: 10.0 }}rem;
        --product-card-border-opacity: {{ settings.card_border_opacity | divided_by: 100.0 }};
        --product-card-shadow-opacity: {{ settings.card_shadow_opacity | divided_by: 100.0 }};
        --product-card-shadow-visible: {% if settings.card_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --product-card-shadow-horizontal-offset: {{ settings.card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
        --product-card-shadow-vertical-offset: {{ settings.card_shadow_vertical_offset | divided_by: 10.0 }}rem;
        --product-card-shadow-blur-radius: {{ settings.card_shadow_blur | divided_by: 10.0 }}rem;

        --collection-card-image-padding: {{ settings.collection_card_image_padding | divided_by: 10.0 }}rem;
        --collection-card-corner-radius: {{ settings.collection_card_corner_radius | divided_by: 10.0 }}rem;
        --collection-card-text-alignment: {{ settings.collection_card_text_alignment }};
        --collection-card-border-width: {{ settings.collection_card_border_thickness | divided_by: 10.0 }}rem;
        --collection-card-border-opacity: {{ settings.collection_card_border_opacity | divided_by: 100.0 }};
        --collection-card-shadow-opacity: {{ settings.collection_card_shadow_opacity | divided_by: 100.0 }};
        --collection-card-shadow-visible: {% if settings.collection_card_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --collection-card-shadow-horizontal-offset: {{ settings.collection_card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
        --collection-card-shadow-vertical-offset: {{ settings.collection_card_shadow_vertical_offset | divided_by: 10.0 }}rem;
        --collection-card-shadow-blur-radius: {{ settings.collection_card_shadow_blur | divided_by: 10.0 }}rem;

        --blog-card-image-padding: {{ settings.blog_card_image_padding | divided_by: 10.0 }}rem;
        --blog-card-corner-radius: {{ settings.blog_card_corner_radius | divided_by: 10.0 }}rem;
        --blog-card-text-alignment: {{ settings.blog_card_text_alignment }};
        --blog-card-border-width: {{ settings.blog_card_border_thickness | divided_by: 10.0 }}rem;
        --blog-card-border-opacity: {{ settings.blog_card_border_opacity | divided_by: 100.0 }};
        --blog-card-shadow-opacity: {{ settings.blog_card_shadow_opacity | divided_by: 100.0 }};
        --blog-card-shadow-visible: {% if settings.blog_card_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --blog-card-shadow-horizontal-offset: {{ settings.blog_card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
        --blog-card-shadow-vertical-offset: {{ settings.blog_card_shadow_vertical_offset | divided_by: 10.0 }}rem;
        --blog-card-shadow-blur-radius: {{ settings.blog_card_shadow_blur | divided_by: 10.0 }}rem;

        --badge-corner-radius: {{ settings.badge_corner_radius | divided_by: 10.0 }}rem;

        --popup-border-width: {{ settings.popup_border_thickness }}px;
        --popup-border-opacity: {{ settings.popup_border_opacity | divided_by: 100.0 }};
        --popup-corner-radius: {{ settings.popup_corner_radius }}px;
        --popup-shadow-opacity: {{ settings.popup_shadow_opacity | divided_by: 100.0 }};
        --popup-shadow-horizontal-offset: {{ settings.popup_shadow_horizontal_offset }}px;
        --popup-shadow-vertical-offset: {{ settings.popup_shadow_vertical_offset }}px;
        --popup-shadow-blur-radius: {{ settings.popup_shadow_blur }}px;

        --drawer-border-width: {{ settings.drawer_border_thickness }}px;
        --drawer-border-opacity: {{ settings.drawer_border_opacity | divided_by: 100.0 }};
        --drawer-shadow-opacity: {{ settings.drawer_shadow_opacity | divided_by: 100.0 }};
        --drawer-shadow-horizontal-offset: {{ settings.drawer_shadow_horizontal_offset }}px;
        --drawer-shadow-vertical-offset: {{ settings.drawer_shadow_vertical_offset }}px;
        --drawer-shadow-blur-radius: {{ settings.drawer_shadow_blur }}px;

        --spacing-sections-desktop: {{ settings.spacing_sections }}px;
        --spacing-sections-mobile: {% if settings.spacing_sections < 24 %}{{ settings.spacing_sections }}{% else %}{{ settings.spacing_sections | times: 0.7 | round | at_least: 20 }}{% endif %}px;

        --grid-desktop-vertical-spacing: {{ settings.spacing_grid_vertical }}px;
        --grid-desktop-horizontal-spacing: {{ settings.spacing_grid_horizontal }}px;
        --grid-mobile-vertical-spacing: {{ settings.spacing_grid_vertical | divided_by: 2 }}px;
        --grid-mobile-horizontal-spacing: {{ settings.spacing_grid_horizontal | divided_by: 2 }}px;

        --text-boxes-border-opacity: {{ settings.text_boxes_border_opacity | divided_by: 100.0 }};
        --text-boxes-border-width: {{ settings.text_boxes_border_thickness }}px;
        --text-boxes-radius: {{ settings.text_boxes_radius }}px;
        --text-boxes-shadow-opacity: {{ settings.text_boxes_shadow_opacity | divided_by: 100.0 }};
        --text-boxes-shadow-visible: {% if settings.text_boxes_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --text-boxes-shadow-horizontal-offset: {{ settings.text_boxes_shadow_horizontal_offset }}px;
        --text-boxes-shadow-vertical-offset: {{ settings.text_boxes_shadow_vertical_offset }}px;
        --text-boxes-shadow-blur-radius: {{ settings.text_boxes_shadow_blur }}px;

        --buttons-radius: {{ settings.buttons_radius }}px;
        --buttons-radius-outset: {% if settings.buttons_radius > 0 %}{{ settings.buttons_radius | plus: settings.buttons_border_thickness }}{% else %}0{% endif %}px;
        --buttons-border-width: {% if settings.buttons_border_opacity > 0 %}{{ settings.buttons_border_thickness }}{% else %}0{% endif %}px;
        --buttons-border-opacity: {{ settings.buttons_border_opacity | divided_by: 100.0 }};
        --buttons-shadow-opacity: {{ settings.buttons_shadow_opacity | divided_by: 100.0 }};
        --buttons-shadow-visible: {% if settings.buttons_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --buttons-shadow-horizontal-offset: {{ settings.buttons_shadow_horizontal_offset }}px;
        --buttons-shadow-vertical-offset: {{ settings.buttons_shadow_vertical_offset }}px;
        --buttons-shadow-blur-radius: {{ settings.buttons_shadow_blur }}px;
        --buttons-border-offset: {% if settings.buttons_radius > 0 or settings.buttons_shadow_opacity > 0 %}0.3{% else %}0{% endif %}px;

        --inputs-radius: {{ settings.inputs_radius }}px;
        --inputs-border-width: {{ settings.inputs_border_thickness }}px;
        --inputs-border-opacity: {{ settings.inputs_border_opacity | divided_by: 100.0 }};
        --inputs-shadow-opacity: {{ settings.inputs_shadow_opacity | divided_by: 100.0 }};
        --inputs-shadow-horizontal-offset: {{ settings.inputs_shadow_horizontal_offset }}px;
        --inputs-margin-offset: {% if settings.inputs_shadow_vertical_offset != 0 and settings.inputs_shadow_opacity > 0 %}{{ settings.inputs_shadow_vertical_offset | abs }}{% else %}0{% endif %}px;
        --inputs-shadow-vertical-offset: {{ settings.inputs_shadow_vertical_offset }}px;
        --inputs-shadow-blur-radius: {{ settings.inputs_shadow_blur }}px;
        --inputs-radius-outset: {% if settings.inputs_radius > 0 %}{{ settings.inputs_radius | plus: settings.inputs_border_thickness }}{% else %}0{% endif %}px;

        --variant-pills-radius: {{ settings.variant_pills_radius }}px;
        --variant-pills-border-width: {{ settings.variant_pills_border_thickness }}px;
        --variant-pills-border-opacity: {{ settings.variant_pills_border_opacity | divided_by: 100.0 }};
        --variant-pills-shadow-opacity: {{ settings.variant_pills_shadow_opacity | divided_by: 100.0 }};
        --variant-pills-shadow-horizontal-offset: {{ settings.variant_pills_shadow_horizontal_offset }}px;
        --variant-pills-shadow-vertical-offset: {{ settings.variant_pills_shadow_vertical_offset }}px;
        --variant-pills-shadow-blur-radius: {{ settings.variant_pills_shadow_blur }}px;
      }

      /* This selector targets all elements on the page, as well as their ::before and ::after pseudo-elements. */
      *,
      *::before,
      *::after {
        /* This rule makes all elements inherit the box-sizing property from their parent elements. */
        box-sizing: inherit;
      }

      html {
        /* It's common to set box-sizing: border-box; globally to ensure that padding and borders 
        are included in the elementâ€™s total width and height, which makes layout calculations more predictable. */
        box-sizing: border-box;
        /* root html size of the browser is typically 16px so 1rem = 16px. 0.625rem = 10px */
        font-size: calc(var(--font-body-scale) * 62.5%);
        height: 100%;
      }

      body {
        /* CSS Grid is primarily designed for creating two-dimensional layouts. 
        It allows you to define both rows and columns, */
        display: grid;
        /* The first two rows (auto auto) will automatically size based on their content.
        The third row (1fr) will take up the remaining space. 
        The 1fr unit stands for "1 fraction of the available space." */
        grid-template-rows: auto auto 1fr auto;
        /* This line defines that the grid will have only one column that spans 100% of the width of the body. 
        Essentially, this makes the entire body content flow in a single column. */
        grid-template-columns: 100%;
        /* This line ensures that the body element will take up at least 100% of the height of the viewport. 
        This is often used to ensure that the body covers the full height of the screen, 
        even if the content is less than the height of the screen. */
        min-height: 100%;
        /* This line removes any default margin that browsers might apply to the body element, 
        ensuring that the body content aligns perfectly with the edges of the viewport. */
        margin: 0;
        /* 1.5rem = 15px (1.5 * 10px base) */
        font-size: 1.5rem;
        /* This line sets the spacing between the letters (tracking) to 0.06rem, which is 0.06 times the root font size.  */
        letter-spacing: 0.06rem;
        /* This line calculates the line height dynamically based on the value of the custom CSS property --font-body-scale */
        line-height: calc(1 + 0.8 / var(--font-body-scale));
        /* This line sets the font family to the value of the custom property --font-body-family */
        font-family: var(--font-body-family);
        /* This line sets the font style (e.g., normal, italic, etc.) according to the value of the --font-body-style custom property. */
        font-style: var(--font-body-style);
        /* This line sets the font weight (e.g., regular, bold) based on the --font-body-weight custom property. */
        font-weight: var(--font-body-weight);
      }

      /* This is a media query. It applies the enclosed styles only when the screen width is at least 750 pixels wide. */
      @media screen and (min-width: 750px) {
        body {
          font-size: 1.6rem;
        }
      }
    {% endstyle %}

    {% comment %} It includes the base CSS file into the page from the assets folder
    'stylesheet_tag:' This function wraps the generated URL in a <link> element, 
    adding the necessary attributes (rel="stylesheet", href="URL") to include the CSS file on the page.  
    {% endcomment %}
    {{ 'base.css' | asset_url | stylesheet_tag }}
    {% comment %}  this stylesheet is initially loaded only for print media, 
    and once it's loaded, the `onload` event changes its media attribute to 'all,' 
    making it apply to all media types. This technique can help with performance by deferring 
    non-essential styles until needed. {% endcomment %}
    <link rel="stylesheet" href="{{ 'component-cart-items.css' | asset_url }}" media="print" onload="this.media='all'">

    {% comment %} Renders those stylesheets if cart type = drawer (general settings) {% endcomment %}
    {%- if settings.cart_type == 'drawer' -%}
      {{ 'component-cart-drawer.css' | asset_url | stylesheet_tag }}
      {{ 'component-cart.css' | asset_url | stylesheet_tag }}
      {{ 'component-totals.css' | asset_url | stylesheet_tag }}
      {{ 'component-price.css' | asset_url | stylesheet_tag }}
      {{ 'component-discounts.css' | asset_url | stylesheet_tag }}
    {%- endif -%}

    {%- unless settings.type_body_font.system? -%}
      {% comment %}theme-check-disable AssetPreload{% endcomment %}
      <link rel="preload" as="font" href="{{ settings.type_body_font | font_url }}" type="font/woff2" crossorigin>
      {% comment %}theme-check-enable AssetPreload{% endcomment %}
    {%- endunless -%}
    {%- unless settings.type_header_font.system? -%}
      {% comment %}theme-check-disable AssetPreload{% endcomment %}
      <link rel="preload" as="font" href="{{ settings.type_header_font | font_url }}" type="font/woff2" crossorigin>
      {% comment %}theme-check-enable AssetPreload{% endcomment %}
    {%- endunless -%}

    {%- if localization.available_countries.size > 1 or localization.available_languages.size > 1 -%}
      {{ 'component-localization-form.css' | asset_url | stylesheet_tag: preload: true }}
      <script src="{{ 'localization-form.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}

    {%- if settings.predictive_search_enabled -%}
      <link
        rel="stylesheet"
        href="{{ 'component-predictive-search.css' | asset_url }}"
        media="print"
        onload="this.media='all'"
      >
    {%- endif -%}

    {% comment %} This block of JavaScript is used to detect if the Shopify store is in "design mode" 
     (a special mode used by theme editors in Shopify) {% endcomment %}
    <script>
      if (Shopify.designMode) {
        document.documentElement.classList.add('shopify-design-mode');
      }
    </script>
  </head>

  {% comment %} A static class applied to the body and a liquid conditional statement to add a class {% endcomment %}
  <body class="gradient{% if settings.animations_hover_elements != 'none' %} animate--hover-{{ settings.animations_hover_elements }}{% endif %}">
    <a class="skip-to-content-link button visually-hidden" href="#MainContent">
      {{ 'accessibility.skip_to_text' | t }}
    </a>

    {%- if settings.cart_type == 'drawer' -%}
      {%- render 'cart-drawer' -%}
    {%- endif -%}

    {% sections 'header-group' %}

    {% comment %} ID used for the skip-to-content link to target this section. 
    'tabindex="-1":' Allows the element to receive focus programmatically, 
    but not through keyboard navigation.{% endcomment %}
    <main id="MainContent" class="content-for-layout focus-none" role="main" tabindex="-1">
      {{ content_for_layout }}
    </main>

    {% sections 'footer-group' %}

    <ul hidden>
      <li id="a11y-refresh-page-message">{{ 'accessibility.refresh_page' | t }}</li>
      <li id="a11y-new-window-message">{{ 'accessibility.link_messages.new_window' | t }}</li>
    </ul>

    {% comment %} 
    This script is setting up some global variables and strings for various parts of the Shopify theme. 
    These global variables are typically used to provide dynamic data to JavaScript functions, 
    making it easier to handle things like cart interactions, product variants, and localization. 
    {% endcomment %}
    <script>
      // This sets a global variable shopUrl on the window object.
      // The request.origin property returns the origin of the current request, which is the URL of the current web page.
      window.shopUrl = '{{ request.origin }}';
      // This sets up a global object routes with several properties related to cart functionality and predictive search.
      window.routes = {
        cart_add_url: '{{ routes.cart_add_url }}',
        cart_change_url: '{{ routes.cart_change_url }}',
        cart_update_url: '{{ routes.cart_update_url }}',
        cart_url: '{{ routes.cart_url }}',
        predictive_search_url: '{{ routes.predictive_search_url }}',
      };

      // This sets up a global object cartStrings for storing localized strings related to the cart.
      window.cartStrings = {
        error: `{{ 'sections.cart.cart_error' | t }}`,
        quantityError: `{{ 'sections.cart.cart_quantity_error_html' | t: quantity: '[quantity]' }}`,
      };

      // This sets up a global object variantStrings for storing localized strings related to product variants.
      window.variantStrings = {
        addToCart: `{{ 'products.product.add_to_cart' | t }}`,
        soldOut: `{{ 'products.product.sold_out' | t }}`,
        unavailable: `{{ 'products.product.unavailable' | t }}`,
        unavailable_with_option: `{{ 'products.product.value_unavailable' | t: option_value: '[value]' }}`,
      };

      // This sets up a global object quickOrderListStrings for strings related to a quick order list.
      window.quickOrderListStrings = {
        itemsAdded: `{{ 'sections.quick_order_list.items_added.other' | t: quantity: '[quantity]' }}`,
        itemAdded: `{{ 'sections.quick_order_list.items_added.one' | t: quantity: '[quantity]' }}`,
        itemsRemoved: `{{ 'sections.quick_order_list.items_removed.other' | t: quantity: '[quantity]' }}`,
        itemRemoved: `{{ 'sections.quick_order_list.items_removed.one' | t: quantity: '[quantity]' }}`,
        viewCart: `{{- 'sections.quick_order_list.view_cart' | t -}}`,
        each: `{{- 'sections.quick_order_list.each' | t: money: '[money]' }}`,
        min_error: `{{- 'sections.quick_order_list.min_error' | t: min: '[min]' }}`,
        max_error: `{{- 'sections.quick_order_list.max_error' | t: max: '[max]' }}`,
        step_error: `{{- 'sections.quick_order_list.step_error' | t: step: '[step]' }}`,
      };

      // This sets up a global object accessibilityStrings for strings related to accessibility features.
      window.accessibilityStrings = {
        imageAvailable: `{{ 'products.product.media.image_available' | t: index: '[index]' }}`,
        shareSuccess: `{{ 'general.share.success_message' | t }}`,
        pauseSlideshow: `{{ 'sections.slideshow.pause_slideshow' | t }}`,
        playSlideshow: `{{ 'sections.slideshow.play_slideshow' | t }}`,
        recipientFormExpanded: `{{ 'recipient.form.expanded' | t }}`,
        recipientFormCollapsed: `{{ 'recipient.form.collapsed' | t }}`,
        countrySelectorSearchCount: `{{ 'localization.country_results_count' | t: count: '[count]' }}`,
      };
    </script>

    {%- if settings.predictive_search_enabled -%}
      <script src="{{ 'predictive-search.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}

    {%- if settings.cart_type == 'drawer' -%}
      <script src="{{ 'cart-drawer.js' | asset_url }}" defer="defer"></script>
    {%- endif -%}
  </body>
</html>
